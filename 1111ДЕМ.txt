Create table Клиент (
КодКлиент int identity(1,1) primary key not null,
Логин varchar (30),
Пароль varchar (30),
ФИО varchar (75),
Номер_телефона varchar (30),
Количество_заявок varchar (30)
)

Create table Вид_работы(
КодРаботы int identity(1,1) primary key not null,
Наименование varchar (30),
Сложность varchar (30),
Цена money
)

Create table Сотрудники (
КодСотрудник int identity(1,1) primary key not null,
Логин varchar (30),
Пароль varchar (30),
ФИО varchar (75),
Дата_рождения date,
Номер_паспорта varchar(20),
Должность varchar(25)
)


Create table Заявка_на_ремонт (
КодЗаявка int identity(1,1) primary key not null,
КодКлиента int,
КодЗапчасти int,
КодРаботы int,
КодОборудования int,
Номер_заявки int,
Дата_добавления date,
Тип_неисправности varchar(50),
Статус varchar(15)
)



Create table Склад (
КодЗапчасти int identity(1,1) primary key not null,
Наименование varchar(55),
Количество int,
Цена money
)

Create table Оборудование (
КодОборудования int identity(1,1) primary key not null,
Наименование varchar(55),
Серийный_номер int,
Описание varchar(255),
Гарантия varchar(75),
Стоимость money,
Дата_покупки datetime
)

Create table Ремонтные_работы (
КодРемонта int identity(1,1) primary key not null,
КодЗаявка int,
КодСотрудника int,
Дата_начала datetime,
Дата_завершения datetime,
Приоритет varchar(35),
Описание_проблемы varchar(255),
)

-- Заполнение таблицы "Клиент"
INSERT INTO Клиент (Логин, Пароль, ФИО, Номер_телефона, Количество_заявок)
VALUES
('log1', 'pass1', 'Курошев Роман Алексеевич', '89998887777', '1'),
('log2', 'pass2', 'Спицкий Алексей Александрович', '89998886666', '1'),
('log3', 'pass3', 'Джони Агджебедински', '89998885555', '1');

-- Заполнение таблицы "Вид_работы"
INSERT INTO Вид_работы (Наименование, Сложность, Цена)
VALUES
('Капитальный', 'Тяжелая', 3000.00),
('Диагностика', 'Легкая', 1000.00),
('Замена комплектующих', 'Средняя', 2000.00);

-- Заполнение таблицы "Сотрудники"
INSERT INTO Сотрудники (Логин, Пароль, ФИО, Дата_рождения, Номер_паспорта, Должность)
VALUES
('log1', 'pass1', 'Иван Иванов', '2001-05-01', '3242454654', 'Менеджер'),
('log2', 'pass2', 'Алексей Алексеев', '2002-01-07', '1232544678', 'Специалист'),
('log3', 'pass3', 'Джаваншир Агджебедински', '2003-02-09', '3423545658', 'Специалист');

-- Заполнение таблицы "Склад"
INSERT INTO Склад (Наименование, Количество, Цена)
VALUES
('Кабель питания', 43, 599.00),
('Фильтр', 24, 799.00),
('Компрессор', 34, 699.00);

-- Заполнение таблицы "Оборудование"
INSERT INTO Оборудование (Наименование, Серийный_номер, Описание, Гарантия, Стоимость, Дата_покупки)
VALUES
('Паяльная станция', 1445, 'Оборудование для пайки', '6 месяцев', 13500.00, 2024-04-05),
('Вакуумный пресс', 8775, 'Оборудование для работы с фреоном', '12 месяцев', 370000.00, 2024-01-12),
('Сварочный аппарат', 2344, 'Средства для сварки', '60 месяцев', 110880.00, 2023-08-20);

-- Заполнение таблицы "Ремонтные_работы"
INSERT INTO Ремонтные_работы (КодЗаявка, КодСотрудника, Дата_начала, Дата_завершения, Приоритет, Описание_проблемы)
VALUES
(1, 1, '2024-04-01', '2024-04-03', 'Высокий', 'Порван кабель питания'),
(2, 2, '2024-04-02', '2024-04-06', 'Средний', 'Испортился фильтр'),
(3, 3, '2024-04-03', '2024-04-09', 'Низкий', 'Вышел из строя компрессор');

-- Заполнение таблицы "Заявка_на_ремонт"
INSERT INTO Заявка_на_ремонт (КодКлиента, КодЗапчасти, КодРаботы, КодОборудования, Номер_заявки, Дата_добавления, Тип_неисправности, Статус)
VALUES
(1, 1, 3, 1, 1, '2024-04-01', 'Питание', 'В процессе'),
(2, 2, 3, 2, 2, '2024-04-02', 'Фильтр', 'В процессе'),
(3, 3, 1, 3, 3, '2024-04-03', 'Компрессор', 'Выполнено');

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

--Представления
Количество выполненных заявок;
SELECT COUNT('dbo.Заявка_на_ремонт.*') AS Expr1
FROM dbo.Заявка_на_ремонт
WHERE (Статус = 'Выполнено')

Среднее время выполнения заявки;
SELECT AVG(DATEDIFF(day, Дата_начала, Дата_завершения)) AS Среднее_время_ремонта
FROM dbo.Ремонтные_работы

--Процедура
CREATE PROCEDURE [dbo].[CustomerSearchPhone]
@LastTelClient VARCHAR(20)
AS
BEGIN
SELECT * FROM Клиент
WHERE Номер_телефона = @LastTelClient;
END

--Триггеры добавления INSERT /удаление DELETE /обнолвние UPDATE:
CREATE TRIGGER Триггер
ON Заявка_на_ремонт
AFTER INSERT
AS
BEGIN
SET NOCOUNT ON;
PRINT 'Данные успешно добавлены в систему!'
END
CREATE TRIGGER Триггер2
ON Заявка_на_ремонт
AFTER DELETE
AS
BEGIN
SET NOCOUNT ON;
PRINT 'Данные успешно удалены!'
END
CREATE TRIGGER Триггер3
ON Заявка_на_ремонт
AFTER UPDATE
AS
BEGIN
SET NOCOUNT ON;
PRINT 'Данные успешно обновлены!'
END

--Роль
use [bd_ekz];
CREATE ROLE [Manager];
CREATE LOGIN [Manager_login] WITH PASSWORD = '1';
USE [bd_ekz];
CREATE USER [Manager_user] FOR LOGIN [Manager_login];
ALTER ROLE [Manager] ADD MEMBER [Manager_user];

проверка:
SELECT name AS 'RoleName'
FROM sys.database_principals
WHERE type_desc = 'DATABASE_ROLE';



/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
SqlConnection sqlcon = new SqlConnection(@"Data Source=BD\LAB;Initial Catalog=ДЕМ ХОДЬКОВ;User ID=403admin;Password=ad403inS");
            string query = "Select * from Клиент Where Логин = '" + textBox1.Text.Trim() + "' and Пароль = '" + textBox2.Text.Trim() + "'";
            SqlDataAdapter sda = new SqlDataAdapter(query, sqlcon);
            DataTable dtbl = new DataTable();
            sda.Fill(dtbl);
            if (dtbl.Rows.Count == 1)
            {
                ClientForm objClientForm = new ClientForm();
                this.Hide();
                objClientForm.Show();
            }

            else
            {
                MessageBox.Show("Такого аккаунта не существует!", "Аккаунта не существует!", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            }

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Руководство:
Руководство системному программисту
1. Введение
Данное руководство предназначено для системного программиста,
ответственного за поддержку и модернизацию автоматизированной
информационной системы (АИС) для : ООО "Конди". Система
включает в себя базу данных и приложение, разработанное на платформе
Windows Forms, для управления данной базой.
2. Архитектура системы
- База данных: Создана и управляется с помощью SQL Server Management Studio
(SSMS). База данных содержит таблицы, хранимые процедуры, индексы,
ограничения и триггеры для обеспечения целостности и эффективности работы.
- Приложение: Разработано с использованием Windows Forms. Приложение
обеспечивает интерфейс для взаимодействия пользователей с базой данных.
3. Структура базы данных
База данных состоит из следующих основных таблиц:
- Сотрудники: Хранит информацию о сотрудниках фабрики.
- Клиент: Содержит данные о клиентах фабрики.
- Вид_работы: Содержит информацию о наименовании и сложности работ.
- Заявка_на_ремонт: Учет всех заявок.
- Оборудование: Содержит данные об оборудовании.
- Регистрация_заявок: Содержит информацию о регистрации заявки.
- Ремонтные_работы: Содержит данные о проводимых ремонтных работах.
- Склад: Содержит данные о деталях и их колличестве.

4. Установка и настройка
1. Установка SQL Server и SSMS:
- Установите SQL Server и SSMS с официального сайта Microsoft.
- Создайте новую базу данных и импортируйте схемы и данные из
предоставленных скриптов.
2. Настройка приложения:
- Убедитесь, что на вашем компьютере установлена платформа .NET
Framework, необходимая для работы Windows Forms.
- Откройте проект приложения в Visual Studio.
- Настройте строку подключения к базе данных в конфигурационном файле
приложения.
5. Управление пользователями и ролями
1. Создание пользователей:
- Создайте пользователей в SQL Server, соответствующих ролям
Администратор, Менеджер и Клиент.
- Присвойте каждому пользователю соответствующую роль.
2. Настройка прав доступа:
- Используйте команды SQL для назначения прав доступа пользователям.
- Пример команд для назначения прав доступа:
— Роль Администратор
GRANT EXECUTE TO Administrator;
GRANT ALTER, CREATE, DELETE, EXECUTE, INSERT,
REFERENCES, SELECT, UPDATE ON DATABASE::[Euromebel] TO
Administrator;
— Роль Менеджер
GRANT EXECUTE ON [dbo].[DeleteScheduledAppointment] TO Manager;
GRANT EXECUTE ON [dbo].[GetAllData] TO Manager;
GRANT SELECT ON Clients, Services TO Manager;
— Роль Клиент
GRANT EXECUTE ON [dbo].[ShowAvailableServices] TO Client;

6. Оформление кода
При работе с кодом приложения и базы данных необходимо
придерживаться следующих требований:
- Идентификаторы переменных, методов и классов должны отражать их
суть и цель.
- Следуйте соглашению об именовании (Code Convention) и используйте
стиль CamelCase или snake_case.
- Используйте комментарии для пояснения фрагментов кода.
7. Резервное копирование и восстановление
Для обеспечения сохранности данных необходимо регулярно выполнять
резервное копирование базы данных. Используйте следующие команды для
резервного копирования и восстановления:
— Резервное копирование
BACKUP DATABASE [based] TO DISK = 'C:\Backup\based.bak'
— Восстановление базы данных
RESTORE DATABASE [based] FROM DISK = 'C:\Backup\based.bak'
8. Обновление и модификация системы
1. Обновление базы данных:
- Внесение изменений в структуру базы данных (добавление таблиц,
хранимых процедур и т.д.) выполняется через SSMS.
- Убедитесь, что все изменения тестируются на тестовом сервере перед
применением на рабочем сервере.
2. Обновление приложения:
- Внесение изменений в код приложения выполняется в Visual Studio.
- После внесения изменений, приложение необходимо
перекомпилировать и протестировать перед развертыванием на рабочем
компьютере.
9. Диагностика и устранение неполадок
- Логирование: Убедитесь, что все критические операции и ошибки логируются
для последующей диагностики.
- Мониторинг: Регулярно проверяйте состояние сервера базы данных и
производительность приложения.
